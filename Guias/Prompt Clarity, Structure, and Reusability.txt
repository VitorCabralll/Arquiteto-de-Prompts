Be Clear, Direct, and Detailed
When interacting with AI models, think of them as brilliant but very new employees (with amnesia) who need explicit instructions. They do not have context on your norms, styles, guidelines, or preferred ways of working. The more precisely you explain what you want, the better the response will be.
The Golden Rule of Clear Prompting
Show your prompt to a colleague, ideally someone who has minimal context on the task, and ask them to follow the instructions. If they're confused, the AI will likely be too.
How to Be Clear, Contextual, and Specific
●	Give contextual information:
○	What the task results will be used for
○	What audience the output is meant for
○	What workflow the task is a part of
○	The end goal of the task
●	Be specific about what you want the AI to do
●	Provide instructions as sequential steps using numbered lists or bullet points
Examples
Anonymizing Customer Feedback
Unclear Prompt:
     Please remove all personally identifiable information from these customer feedback messages: {{FEEDBACK_DATA}}

Clear Prompt:
     Your task is to anonymize customer feedback for our quarterly review.

Instructions:
1. Replace all customer names with "CUSTOMER_[ID]" (e.g., "Jane Doe" → "CUSTOMER_001").
2. Replace email addresses with "EMAIL_[ID]@example.com".
3. Redact phone numbers as "PHONE_[ID]".
4. If a message mentions a specific product (e.g., "AcmeCloud"), leave it intact.
5. If no PII is found, copy the message verbatim.
6. Output only the processed messages, separated by "---".

Data to process: {{FEEDBACK_DATA}}
   

Crafting a Marketing Email Campaign
Vague Prompt:
     Write a marketing email for our new AcmeCloud features.

Specific Prompt:
     Your task is to craft a targeted marketing email for our Q3 AcmeCloud feature release.

Instructions:
1. Write for this target audience: Mid-size tech companies (100-500 employees) upgrading from on-prem to cloud.
2. Highlight 3 key new features: advanced data encryption, cross-platform sync, and real-time collaboration.
3. Tone: Professional yet approachable. Emphasize security, efficiency, and teamwork.
4. Include a clear CTA: Free 30-day trial with priority onboarding.
5. Subject line: Under 50 chars, mention "security" and "collaboration".
6. Personalization: Use {{COMPANY_NAME}} and {{CONTACT_NAME}} variables.

Structure:
1. Subject line
2. Email body (150-200 words)
3. CTA button text
   

Incident Response
Vague Prompt:
     Analyze this AcmeCloud outage report and summarize the key points.

{{REPORT}}
   

Detailed Prompt:
     Analyze this AcmeCloud outage report. Skip the preamble. Keep your response terse and write only the bare bones necessary information. List only:
1) Cause
2) Duration
3) Impacted services
4) Number of affected users
5) Estimated revenue loss.

Here's the report: {{REPORT}}
Use XML Tags to Structure Prompts
When your prompts involve multiple components like context, instructions, and examples, XML tags can be a game-changer. They help parse prompts more accurately, leading to higher-quality outputs.
XML Tip
Use tags like <instructions>, <example>, and <formatting> to clearly separate different parts of your prompt. This prevents mixing up instructions with examples or context.
Why Use XML Tags?
●	Clarity: Clearly separate different parts of your prompt and ensure your prompt is well structured.
●	Accuracy: Reduce errors caused by misinterpreting parts of your prompt.
●	Flexibility: Easily find, add, remove, or modify parts of your prompt without rewriting everything.
●	Parseability: Having XML tags in the output makes it easier to extract specific parts of the response by post-processing.
There are no canonical "best" XML tags, although we recommend that your tag names make sense with the information they surround.
Tagging Best Practices
●	Be consistent: Use the same tag names throughout your prompts, and refer to those tag names when talking about the content (e.g., "Using the contract in <contract> tags...").
●	Nest tags: You should nest tags <outer><inner></inner></outer> for hierarchical content.
●	Power user tip: Combine XML tags with other techniques like multishot prompting (<examples>) or chain of thought (<thinking>, <answer>). This creates super-structured, high-performance prompts.
Examples
Generating Financial Reports
No XML Tags:
     You're a financial analyst at AcmeCorp. Generate a Q2 financial report for our investors. Include sections on Revenue Growth, Profit Margins, and Cash Flow, like with this example from last year: {{Q1_REPORT}}. Use data points from this spreadsheet: {{SPREADSHEET_DATA}}. The report should be extremely concise, to the point, professional, and in list format. It should and highlight both strengths and areas for improvement.
With XML Tags:
     You're a financial analyst at AcmeCorp. Generate a Q2 financial report for our investors.

AcmeCorp is a B2B SaaS company. Our investors value transparency and actionable insights.

Use this data for your report:<data>{{SPREADSHEET_DATA}}</data>

<instructions>
1. Include sections: Revenue Growth, Profit Margins, Cash Flow.
2. Highlight strengths and areas for improvement.
</instructions>

Make your tone concise and professional. Follow this structure:
<formatting_example>{{Q1_REPORT}}</formatting_example>
Legal Contract Analysis
No XML Tags:
     Analyze this software licensing agreement for potential risks and liabilities: {{CONTRACT}}. Focus on indemnification, limitation of liability, and IP ownership clauses. Also, note any unusual or concerning terms. Here's our standard contract for reference: {{STANDARD_CONTRACT}}. Give a summary of findings and recommendations for our legal team.
With XML Tags:
     Analyze this software licensing agreement for legal risks and liabilities.

We're a multinational enterprise considering this agreement for our core data infrastructure.

<agreement>
{{CONTRACT}}</agreement>

This is our standard contract for reference:
<standard_contract>{{STANDARD_CONTRACT}}</standard_contract>

<instructions>
1. Analyze these clauses:
- Indemnification
- Limitation of liability
- IP ownership

2. Note unusual or concerning terms.

3. Compare to our standard contract.

4. Summarize findings in <findings> tags.

5. List actionable recommendations in <recommendations> tags.</instructions>
Use Prompt Templates and Variables
When deploying an AI-based application, your prompts will typically consist of two types of content:
●	Fixed content: Static instructions or context that remain constant across multiple interactions
●	Variable content: Dynamic elements that change with each request or conversation, such as:
○	User inputs
○	Retrieved content for Retrieval-Augmented Generation (RAG)
○	Conversation context such as user account history
○	System-generated data such as tool use results
A prompt template combines these fixed and variable parts, using placeholders for the dynamic content. In some interfaces, these placeholders are denoted with {{double brackets}}, making them easily identifiable and allowing for quick testing of different values.
Benefits of Prompt Templates
Prompt templates offer several advantages:
●	Consistency: Ensure a consistent structure for your prompts across multiple interactions
●	Efficiency: Easily swap out variable content without rewriting the entire prompt
●	Testability: Quickly test different inputs and edge cases by changing only the variable portion
●	Scalability: Simplify prompt management as your application grows in complexity
●	Version control: Easily track changes to your prompt structure over time by keeping tabs only on the core part of your prompt, separate from dynamic inputs
Example Prompt Template
Let's consider a simple application that translates English text to Spanish. The translated text would be variable since you would expect this text to change between users or calls to the AI. This translated text could be dynamically retrieved from databases or the user's input.
Thus, for your translation app, you might use this simple prompt template:
     Translate this text from English to Spanish: {{text}}
   
Example of Template Improvement
See how a basic template can be improved to provide more structured, precise results:
Original prompt:
     From the following list of Wikipedia article titles, identify which article this sentence came from.
Respond with just the article title and nothing else.
Article titles:
{{titles}}
Sentence to classify:
{{sentence}}

Improved prompt:
     You are an intelligent text classification system specialised in matching sentences to Wikipedia article titles. Your task is to identify which Wikipedia article a given sentence most likely belongs to, based on a provided list of article titles.
First, review the following list of Wikipedia article titles:
<article_titles>
{{titles}}
</article_titles>
Now, consider this sentence that needs to be classified:
<sentence_to_classify>
{{sentence}}
</sentence_to_classify>
Your goal is to determine which article title from the provided list best matches the given sentence. Follow these steps:
1. List the key concepts from the sentence
2. Compare each key concept with the article titles
3. Rank the top 3 most relevant titles and explain why they are relevant
4. Select the most appropriate article title that best encompasses or relates to the sentence's content
Wrap your analysis in <analysis> tags. Include the following:
- List of key concepts from the sentence
- Comparison of each key concept with the article titles
- Ranking of top 3 most relevant titles with explanations
- Your final choice and reasoning
After your analysis, provide your final answer: the single most appropriate Wikipedia article title from the list.
Output only the chosen article title, without any additional text or explanation.
Notice how the improved prompt:
●	Adds clear step-by-step reasoning instructions
●	Uses XML tags to organise content
●	Provides explicit output formatting requirements
●	Guides the AI through the analysis process

